FULL INSTALLATION AND SETUP

111111111111
INSTALL DOCKER DESKTOP
E:\software\Docker Desktop Installer.exe

START DOCKER DESKTOP

222222222222
Open CMD -->Run as Administrator
C:\Users\Naresh>docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts


333333333333
LOGIN TO JENKINS
http://localhost:8080


C:\Windows\System32>docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
df65857f181040fb808f95cd81cd5a30

TO START JENKINS
docker start jenkins

C:\Windows\System32>docker start jenkins

---------------------------------
CHECK IF IT RUNNING: docker ps -a

C:\Users\Naresh>docker ps -a
CONTAINER ID   IMAGE                 COMMAND                  CREATED        STATUS          PORTS                                              NAMES
83014020abf6   jenkins/jenkins:lts   "/usr/bin/tini -- /u…"   17 hours ago   Up 44 seconds   0.0.0.0:8080->8080/tcp, 0.0.0.0:50000->50000/tcp   jenkins

C:\Users\Naresh>
---------------------------------
TO REMOVE JENKINS : docker rm jenkins

JENKINS USENAME AND PASSWORD
Username : fivedata
Password : fivedata123
Email : gvnaressh@gmail.com


Plugin - kubernetes-cd.hpi version 1.0.0
Kubernetes Continous Deploy


DOCKER HUB USERNAME AND PASSWORD
Username : gvnaressh
Password : Uzwall12578*

gvnaressh@gmail.com


https://github.com/narresh369/todos.git

PUSH NEW FILES TO GITHUB:
=========================
git add .
git commit -m "Updated files Edited Dockerfile with ignore file"
git remote add origin https://github.com/narresh369/todos.git
git branch -M main
git push -u origin main


MINIKUBE:
========
https://minikube.sigs.k8s.io/docs/start/?arch=%2Fwindows%2Fx86-64%2Fstable%2F.exe+download

E:\software\minikube-installer.exe

C:\Users\Naresh>minikube version
minikube version: v1.36.0
commit: f8f52f5de11fc6ad8244afac475e1d0f96841df1-dirty

C:\Users\Naresh>


Step-by-Step: Install Minikube on Windows
🔹 1. Download Minikube for Windows
Visit the official page:
👉 https://minikube.sigs.k8s.io/docs/start/

Or download directly:
👉 https://github.com/kubernetes/minikube/releases/latest
Look for minikube-windows-amd64.exe

🔹 2. Rename and Move to PATH
After download:

Rename file to minikube.exe

Move it to a folder already in your PATH (e.g., C:\Windows\System32)
Or add the folder containing minikube.exe to your system’s environment variable PATH.

Open Command Prompt again and test:

minikube version

C:\Users\Naresh>minikube start
* minikube v1.36.0 on Microsoft Windows 11 Home Single Language 10.0.26100.4202 Build 26100.4202

If you use Docker Desktop, Minikube will automatically use Docker as its driver.

Microsoft Windows [Version 10.0.26100.4202]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Naresh>minikube version
minikube version: v1.36.0
commit: f8f52f5de11fc6ad8244afac475e1d0f96841df1-dirty

C:\Users\Naresh>minikube start
* minikube v1.36.0 on Microsoft Windows 11 Home Single Language 10.0.26100.4202 Build 26100.4202
* Automatically selected the docker driver
* Using Docker Desktop driver with root privileges
* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.47 ...
* Downloading Kubernetes v1.33.1 preload ...
    > preloaded-images-k8s-v18-v1...:  347.04 MiB / 347.04 MiB  100.00% 1.37 Mi
    > gcr.io/k8s-minikube/kicbase...:  363.46 MiB / 502.26 MiB  72.36% 1.04 MiB
	
---------------------------------------------------------
Microsoft Windows [Version 10.0.26100.4202]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Naresh>minikube version
minikube version: v1.36.0
commit: f8f52f5de11fc6ad8244afac475e1d0f96841df1-dirty

C:\Users\Naresh>minikube start
* minikube v1.36.0 on Microsoft Windows 11 Home Single Language 10.0.26100.4202 Build 26100.4202
* Automatically selected the docker driver
* Using Docker Desktop driver with root privileges
* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.47 ...
* Downloading Kubernetes v1.33.1 preload ...
    > preloaded-images-k8s-v18-v1...:  347.04 MiB / 347.04 MiB  100.00% 1.37 Mi
    > gcr.io/k8s-minikube/kicbase...:  502.26 MiB / 502.26 MiB  100.00% 1.03 Mi
* Creating docker container (CPUs=2, Memory=2200MB) ...
! Failing to connect to https://registry.k8s.io/ from both inside the minikube container and host machine
* To pull new external images, you may need to configure a proxy: https://minikube.sigs.k8s.io/docs/reference/networking/proxy/
* Preparing Kubernetes v1.33.1 on Docker 28.1.1 ...
  - Generating certificates and keys ...
  - Booting up control plane ...
  - Configuring RBAC rules ...
* Configuring bridge CNI (Container Networking Interface) ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: storage-provisioner, default-storageclass
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

C:\Users\Naresh>	
---------------------------------------------------------	
	
minikube status

C:\Users\Naresh>minikube status
minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured


C:\Users\Naresh>
---------------------------------------------------------

docker stop jenkins
docker rm jenkins


docker run -d \
  --name jenkins \
  -u root \
  -p 8080:8080 -p 50000:50000 \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v jenkins_home:/var/jenkins_home \
  jenkins/jenkins:lts

docker run -d --name jenkins -u root -p 8080:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home  jenkins/jenkins:lts



docker exec -it jenkins bash
apt update && apt install -y docker.io
exit



PUSH NEW FILES TO GITHUB:
=========================
git add .
git commit -m "Updated files Edited Dockerfile with ignore file"
git remote add origin https://github.com/narresh369/todos.git
git branch -M main
git push -u origin main




Alternate (Quick Test Way): Use Inline Script
If you still want to use a regular pipeline job, do the following:

Create a "Pipeline" Job

In the configuration:

Choose Pipeline script (not "from SCM")

Paste this minimal working example:


pipeline {
  agent any
  stages {
    stage('Clone') {
      steps {
        git branch: 'main', url: 'https://github.com/narresh369/todos.git'
      }
    }
    stage('Echo') {
      steps {
        echo '✅ Successfully cloned and ran pipeline'
      }
    }
  }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 STEP 1: Validate Your Setup
Make sure the following work inside Jenkins:

🔹 A. Check Docker CLI inside Jenkins
In Jenkins, go to:

Dashboard → Manage Jenkins → Script Console, run:

def proc = 'docker --version'.execute()
proc.waitFor()
println proc.text

Docker version 20.10.24+dfsg1, build 297e128


STEP 2: Test Docker Build Manually in Jenkins Shell
1. Open Jenkins container shell (from your terminal):

docker exec -it jenkins bash

2. Then run:
cd /var/jenkins_home/workspace/todos-pipeline/backend
docker build -t gvnaressh/todo-backend:latest .

This should build your Docker image successfully.

------------------
root@3115de01f386:/# cd /var/jenkins_home/workspace/todos-pipeline/backend
docker build -t gvnaressh/todo-backend:latest .
[+] Building 207.4s (10/10) FINISHED
 => [internal] load build definition from Dockerfile                                                               2.0s
 => => transferring dockerfile: 196B                                                                               0.5s
 => [internal] load metadata for docker.io/library/node:18-alpine                                                  8.8s
 => [internal] load .dockerignore                                                                                  0.1s
 => => transferring context: 92B                                                                                   0.0s
 => [1/5] FROM docker.io/library/node:18-alpine@sha256:8d6421d663b4c28fd3ebc498332f249011d118945588d0a35cb9bc4b8c  0.2s
 => => resolve docker.io/library/node:18-alpine@sha256:8d6421d663b4c28fd3ebc498332f249011d118945588d0a35cb9bc4b8c  0.3s
 => => sha256:1e5a4c89cee5c0826c540ab06d4b6b491c96eda01837f430bd47f0d26702d6e3 1.26MB / 1.26MB                     2.7s
 => => sha256:f18232174bc91741fdf3da96d85011092101a032a93a388b79e99e69c2d5c870 3.64MB / 3.64MB                    19.9s
 => => sha256:dd71dde834b5c203d162902e6b8994cb2309ae049a0eabc4efea161b2b5a3d0e 40.01MB / 40.01MB                  55.6s
 => => sha256:25ff2da83641908f65c3a74d80409d6b1b62ccfaab220b9ea70b80df5a2e0549 446B / 446B                         1.0s
 => => extracting sha256:f18232174bc91741fdf3da96d85011092101a032a93a388b79e99e69c2d5c870                          6.5s
 => => extracting sha256:dd71dde834b5c203d162902e6b8994cb2309ae049a0eabc4efea161b2b5a3d0e                         47.9s
 => => extracting sha256:1e5a4c89cee5c0826c540ab06d4b6b491c96eda01837f430bd47f0d26702d6e3                          3.1s
 => => extracting sha256:25ff2da83641908f65c3a74d80409d6b1b62ccfaab220b9ea70b80df5a2e0549                          0.2s
 => [internal] load build context                                                                                  0.2s
 => => transferring context: 3.68kB                                                                                0.1s
 => [2/5] WORKDIR /app                                                                                             0.7s
 => [3/5] COPY package*.json ./                                                                                    0.2s
 => [4/5] RUN npm install --legacy-peer-deps                                                                      77.5s
 => [5/5] COPY . .                                                                                                 0.2s
 => exporting to image                                                                                             8.1s
 => => exporting layers                                                                                            4.1s
 => => exporting manifest sha256:46a29275a765e77704435c0f9e23ad59c9280205f31ee246a8146baf113e3ab1                  0.0s
 => => exporting config sha256:19a7ac42ae86767e6ac00e0c2af769706f45cb3a0243105c9850a4beb64e2e5a                    0.0s
 => => naming to docker.io/gvnaressh/todo-backend:latest                                                           0.0s
 => => unpacking to docker.io/gvnaressh/todo-backend:latest                                                        3.7s
root@3115de01f386:/var/jenkins_home/workspace/todos-pipeline/backend#

------------------



STEP 3: Push Docker Image to DockerHub

Still inside Jenkins container shell:

docker login -u gvnaressh
# Enter your Docker Hub password

docker login -u gvnaressh
Uzwall12578*

docker push gvnaressh/todo-backend:latest


docker login -u gvnaressh
# Enter your Docker Hub password

docker push gvnaressh/todo-backend:latest

ENTER DOCKERHUB PASSWORD AGAIN:Uzwall12578*
-------------------------
root@3115de01f386:/var/jenkins_home/workspace/todos-pipeline/backend# docker login -u gvnaressh
# Enter your Docker Hub password

docker push gvnaressh/todo-backend:latest
Password:
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
The push refers to repository [docker.io/gvnaressh/todo-backend]
836054549873: Pushed
1e5a4c89cee5: Pushed
5d63d71c5559: Pushed
8e7acf881ca7: Pushed
f18232174bc9: Pushed
25ff2da83641: Pushed
dd71dde834b5: Pushed
6738646e37ca: Pushed
latest: digest: sha256:46a29275a765e77704435c0f9e23ad59c9280205f31ee246a8146baf113e3ab1 size: 1874
root@3115de01f386:/var/jenkins_home/workspace/todos-pipeline/backend#
-------------------------


 This should push the image to your Docker Hub account:
👉 https://hub.docker.com/repository/docker/gvnaressh/todo-backend



 STEP 4: Apply K8s Deployment (Minikube)
Make sure Minikube is running:


minikube start

-----------------------
Microsoft Windows [Version 10.0.26100.4202]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Naresh>minikube start
* minikube v1.36.0 on Microsoft Windows 11 Home Single Language 10.0.26100.4202 Build 26100.4202
* Using the docker driver based on existing profile
* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.47 ...
* Updating the running docker "minikube" container ...
! Failing to connect to https://registry.k8s.io/ from both inside the minikube container and host machine
* To pull new external images, you may need to configure a proxy: https://minikube.sigs.k8s.io/docs/reference/networking/proxy/
* Preparing Kubernetes v1.33.1 on Docker 28.1.1 ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: storage-provisioner, default-storageclass
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

-----------------------

kubectl apply -f k8s/postgres-deployment.yaml
kubectl apply -f k8s/postgres-pvc.yaml
kubectl apply -f k8s/backend-deployment.yaml
---------------------------
E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl apply -f k8s/postgres-pvc.yaml
persistentvolumeclaim/postgres-pvc created

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl apply -f k8s/postgres-deployment.yaml
service/postgres-service created
deployment.apps/postgres created

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl apply -f k8s/backend-deployment.yaml
service/backend-service created
E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl apply -f k8s/backend-deployment.yaml
service/backend-service unchanged
deployment.apps/backend unchanged

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>
---------------------------

Check pods:

kubectl get pods

------------------
E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl get pods
NAME                        READY   STATUS              RESTARTS   AGE
backend-6845f99c98-6zwkn    0/1     ContainerCreating   0          100s
postgres-5464b79444-kvxc6   1/1     Running             0          5m7s


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl get pods
NAME                        READY   STATUS    RESTARTS   AGE
backend-6845f99c98-6zwkn    1/1     Running   0          2m9s
postgres-5464b79444-kvxc6   1/1     Running   0          5m36s
------------------

You should see your backend and Postgres pods running.


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl get services
NAME               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
backend-service    ClusterIP   10.102.153.180   <none>        5000/TCP   6m33s
kubernetes         ClusterIP   10.96.0.1        <none>        443/TCP    123m
postgres-service   ClusterIP   10.103.80.189    <none>        5432/TCP   6m38s

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>

To Access the Backend Locally for Testing
Run this command to port-forward your backend service to your local machine:
kubectl port-forward service/backend-service 5000:5000

http://localhost:5000/api/todos
[{"id":5,"title":"test","completed":false},{"id":4,"title":"hello render","completed":true},{"id":3,"title":"go to school and pay fee","completed":false},{"id":2,"title":"get milk and corn","completed":true}]


C:\Users\Naresh>minikube ip
192.168.49.2

C:\Users\Naresh>



kubectl edit service backend-service


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl get svc backend-service
NAME              TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
backend-service   NodePort   10.102.153.180   <none>        5000:32410/TCP   16m


=========================================
CHANGE PORT AND ENTER THIS COMMAND:E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\k8s\backend-deployment.yaml
  ports:
    - port: 5000      
      nodePort: 32410 
	  
	  E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl apply -f k8s/backend-deployment.yaml
service/backend-service configured
deployment.apps/backend unchanged


kubectl apply -f k8s/backend-deployment.yaml
kubectl apply -f k8s/backend-deployment.yaml
kubectl apply -f k8s/backend-deployment.yaml

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl get svc backend-service
NAME              TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
backend-service   NodePort   10.102.153.180   <none>        5000:32410/TCP   24m

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl apply -f k8s/backend-deployment.yaml
service/backend-service configured
deployment.apps/backend unchanged

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl get svc backend-service
NAME              TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
backend-service   NodePort   10.102.153.180   <none>        5000:32410/TCP   25m

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>minikube service backend-service
|-----------|-----------------|-------------|---------------------------|
| NAMESPACE |      NAME       | TARGET PORT |            URL            |
|-----------|-----------------|-------------|---------------------------|
| default   | backend-service |        5000 | http://192.168.49.2:32410 |
|-----------|-----------------|-------------|---------------------------|
* Starting tunnel for service backend-service.
|-----------|-----------------|-------------|------------------------|
| NAMESPACE |      NAME       | TARGET PORT |          URL           |
|-----------|-----------------|-------------|------------------------|
| default   | backend-service |             | http://127.0.0.1:61201 |
|-----------|-----------------|-------------|------------------------|
* Opening service default/backend-service in default browser...
! Because you are using a Docker driver on windows, the terminal needs to be open to run it.
=========================================


http://127.0.0.1:61201/api/todos

[{"id":5,"title":"test","completed":false},{"id":4,"title":"hello render","completed":true},{"id":3,"title":"go to school and pay fee","completed":false},{"id":2,"title":"get milk and corn","completed":true}]

❌ Why http://192.168.49.2:32410 is not working:
That IP (192.168.49.2) is the VM IP, but Windows firewalls or network isolation between host and the Minikube VM often block external NodePort access from the host system, especially with Docker Desktop.

Even though Minikube shows the NodePort URL, it often won’t work unless you’re using a different Minikube driver (like Hyper-V or VirtualBox), or you’re inside WSL/Linux.



git add .
git commit -m "Updated files Edited Dockerfile with ignore file"
git remote add origin https://github.com/narresh369/todos.git
git branch -M main
git push -u origin main


http://localhost:5173/

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>npm run dev


That’s great to hear your frontend is working locally! Now, let’s move on to testing it inside Kubernetes just like your backend.


 Step-by-Step: Deploy React Frontend to Kubernetes (Minikube)

1. 🧾 Create a Dockerfile for the Frontend

docker build -t your-dockerhub-username/todo-frontend:latest .
docker push your-dockerhub-username/todo-frontend:latest


docker build -t gvnaressh/todo-frontend:latest .
docker push gvnaressh/todo-frontend:latest

--------------------------------------------

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>dir
 Volume in drive E is DATA
 Volume Serial Number is 0ED0-D3D0

 Directory of E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend

29-06-2025  14:23    <DIR>          .
29-06-2025  13:38    <DIR>          ..
29-06-2025  14:14                84 .env
26-06-2025  12:59               253 .gitignore
29-06-2025  14:23               288 Dockerfile
29-06-2025  11:16               153 Dockerfile copy
26-06-2025  12:59               763 eslint.config.js
26-06-2025  12:59               361 index.html
29-06-2025  14:18    <DIR>          node_modules
28-06-2025  12:33               628 package copy.json
28-06-2025  12:41           106,002 package-lock.json
28-06-2025  12:38               627 package.json
28-06-2025  12:30    <DIR>          public
26-06-2025  12:59               856 README.md
28-06-2025  12:32    <DIR>          src
26-06-2025  12:59               161 vite.config.js
              11 File(s)        110,176 bytes
               5 Dir(s)  295,195,701,248 bytes free

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>docker build -t gvnaressh/todo-frontend:latest .
[+] Building 659.0s (14/14) FINISHED                                                               docker:desktop-linux
 => [internal] load build definition from Dockerfile                                                               0.2s
 => => transferring dockerfile: 327B                                                                               0.2s
 => [internal] load metadata for docker.io/library/node:18-alpine                                                  4.1s
 => [internal] load metadata for docker.io/library/nginx:stable-alpine                                             6.3s
 => [internal] load .dockerignore                                                                                  0.0s
 => => transferring context: 2B                                                                                    0.0s
 => [builder 1/6] FROM docker.io/library/node:18-alpine@sha256:8d6421d663b4c28fd3ebc498332f249011d118945588d0a35c  0.3s
 => => resolve docker.io/library/node:18-alpine@sha256:8d6421d663b4c28fd3ebc498332f249011d118945588d0a35cb9bc4b8c  0.2s
 => [internal] load build context                                                                                241.0s
 => => transferring context: 58.48MB                                                                             240.4s
 => [stage-1 1/2] FROM docker.io/library/nginx:stable-alpine@sha256:aed99734248e851764f1f2146835ecad42b5f994081  156.6s
 => => resolve docker.io/library/nginx:stable-alpine@sha256:aed99734248e851764f1f2146835ecad42b5f994081fa6631cc5d  0.2s
 => => sha256:dde65f7af9d6bd24c25436572f04a4590e1d24cc3261e490b4dc04f8ddc95f55 1.79MB / 1.79MB                    21.0s
 => => sha256:bbdf43ac95df903e0e0aba895e4fde36b9994a02e21e6f9ee01a90b874330b2b 955B / 955B                       650.0s
 => => sha256:e57f9eaa9ba5fcc77182b2bac87e8ff12915363b7f083eb096744ac3c762a138 15.52MB / 15.52MB                  90.2s
 => => sha256:19f9a172b25c0bb4945785ec1043c39f16f4af6efc5f40b0000ef423c84c1a1d 1.40kB / 1.40kB                    11.7s
 => => sha256:c544760e65143e93084253d9559bde21e5b5ed47cec5db7ffce3cf52c6c1ea4d 404B / 404B                       644.7s
 => => sha256:532a231453496d98bd24f9d17442565e55a30c355843a7106ca30d455828ab0c 628B / 628B                       633.1s
 => => sha256:3cc2eb67bce91b1eacb09e48d14caba02f056ba09772b34f083b54b7b369cc8c 1.21kB / 1.21kB                    13.0s
 => => extracting sha256:dde65f7af9d6bd24c25436572f04a4590e1d24cc3261e490b4dc04f8ddc95f55                         41.4s
 => => extracting sha256:532a231453496d98bd24f9d17442565e55a30c355843a7106ca30d455828ab0c                          1.0s
 => => extracting sha256:bbdf43ac95df903e0e0aba895e4fde36b9994a02e21e6f9ee01a90b874330b2b                          0.7s
 => => extracting sha256:c544760e65143e93084253d9559bde21e5b5ed47cec5db7ffce3cf52c6c1ea4d                          1.8s
 => => extracting sha256:3cc2eb67bce91b1eacb09e48d14caba02f056ba09772b34f083b54b7b369cc8c                          6.1s
 => => extracting sha256:19f9a172b25c0bb4945785ec1043c39f16f4af6efc5f40b0000ef423c84c1a1d                          2.7s
 => => extracting sha256:e57f9eaa9ba5fcc77182b2bac87e8ff12915363b7f083eb096744ac3c762a138                         64.4s
 => CACHED [builder 2/6] WORKDIR /app                                                                              0.1s
 => [builder 3/6] COPY package*.json ./                                                                            4.9s
 => [builder 4/6] RUN npm install                                                                                271.5s
 => [builder 5/6] COPY . .                                                                                        12.1s
 => [builder 6/6] RUN npm run build                                                                              117.0s
 => [stage-1 2/2] COPY --from=builder /app/dist /usr/share/nginx/html                                              0.1s
 => exporting to image                                                                                             0.9s
 => => exporting layers                                                                                            0.3s
 => => exporting manifest sha256:641e8cd3307e5de7f34aa0cfd8ef29c643e9c0e2b81d3653b36c2ea5c84182dd                  0.0s
 => => exporting config sha256:a3cbf826004161661533bcea7678f0e791090e65d3bc867ae06d71a59cb9b61e                    0.0s
 => => exporting attestation manifest sha256:5bb5945e5c771bb2088bf58254d35aceeb54c5e8f2f3011c11220cc4176f6426      0.1s
 => => exporting manifest list sha256:0f164e66ecf29c3911f8e3fa03797342d7c996b08117775d94ad70c474c7a8f4             0.0s
 => => naming to docker.io/gvnaressh/todo-frontend:latest                                                          0.0s
 => => unpacking to docker.io/gvnaressh/todo-frontend:latest                                                       0.1s

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>docker push gvnaressh/todo-frontend:latest

--------------------------------------------

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>docker push gvnaressh/todo-frontend:latest
The push refers to repository [docker.io/gvnaressh/todo-frontend]
532a23145349: Waiting
c544760e6514: Waiting
8e48f75105d8: Waiting
f18232174bc9: Waiting
3cc2eb67bce9: Waiting
dde65f7af9d6: Waiting
33b69ab3d4e7: Waiting
bbdf43ac95df: Waiting
19f9a172b25c: Waiting
e57f9eaa9ba5: Waiting
push access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>docker login

USING WEB-BASED LOGIN
To sign in with credentials on the command line, use 'docker login -u <username>'

Your one-time device confirmation code is: SBFG-CLMK
Press ENTER to open your browser or submit your device code here: https://login.docker.com/activate

Waiting for authentication in the browser…

gvnaressh
Uzwall12578*

Login Succeeded

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>


docker push gvnaressh/todo-frontend:latest


-----------------------

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>docker push gvnaressh/todo-frontend:latest
The push refers to repository [docker.io/gvnaressh/todo-frontend]
33b69ab3d4e7: Pushed
f18232174bc9: Mounted from gvnaressh/todo-backend
3cc2eb67bce9: Pushed
532a23145349: Pushed
8e48f75105d8: Pushed
bbdf43ac95df: Pushed
19f9a172b25c: Pushed
e57f9eaa9ba5: Pushed
c544760e6514: Pushed
dde65f7af9d6: Pushed
latest: digest: sha256:0f164e66ecf29c3911f8e3fa03797342d7c996b08117775d94ad70c474c7a8f4 size: 856

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>
-----------------------

kubectl apply -f k8s/frontend-deployment.yaml


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl apply -f k8s/frontend-deployment.yaml
E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>kubectl apply -f k8s/frontend-deployment.yaml
service/frontend-service created
deployment.apps/frontend created

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>


minikube service frontend-service


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>minikube service frontend-service
|-----------|------------------|-------------|---------------------------|
| NAMESPACE |       NAME       | TARGET PORT |            URL            |
|-----------|------------------|-------------|---------------------------|
| default   | frontend-service |          80 | http://192.168.49.2:30008 |
|-----------|------------------|-------------|---------------------------|
* Starting tunnel for service frontend-service.
|-----------|------------------|-------------|------------------------|
| NAMESPACE |       NAME       | TARGET PORT |          URL           |
|-----------|------------------|-------------|------------------------|
| default   | frontend-service |             | http://127.0.0.1:62825 |
|-----------|------------------|-------------|------------------------|
* Opening service default/frontend-service in default browser...
! Because you are using a Docker driver on windows, the terminal needs to be open to run it.


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>

Open this in your browser to see the deployed React app inside Kubernetes 🎉
Open this in your browser to see the deployed React app inside Kubernetes 🎉
Open this in your browser to see the deployed React app inside Kubernetes 🎉




rajesh
http://127.0.0.1:61201




STEP 5: Finalize Jenkins Pipeline
Now that the manual steps work:

Update your Jenkinsfile to include the full automation (as shown earlier).

Run the pipeline from Jenkins → "Build Now".




BACKEND DEPLOYED IN RENDER.COM
https://todos-31gl.onrender.com/
https://todos-31gl.onrender.com/api/todos

[{"id":5,"title":"test","completed":false},{"id":4,"title":"hello render","completed":true},{"id":3,"title":"go to school and pay fee","completed":false},{"id":2,"title":"get milk and corn","completed":true}]


full flow using Jenkins + Docker + K8s
full flow using Jenkins + Docker + K8s
full flow using Jenkins + Docker + K8s


C:\Windows\System32>docker info
Client:
 Version:    27.4.0
 Context:    desktop-linux
 Debug Mode: false
 Plugins:
  ai: Ask Gordon - Docker Agent (Docker Inc.)
    Version:  v0.5.1
    Path:     C:\Program Files\Docker\cli-plugins\docker-ai.exe
  buildx: Docker Buildx (Docker Inc.)
    Version:  v0.19.2-desktop.1
    Path:     C:\Program Files\Docker\cli-plugins\docker-buildx.exe
  compose: Docker Compose (Docker Inc.)
    Version:  v2.31.0-desktop.2
    Path:     C:\Program Files\Docker\cli-plugins\docker-compose.exe
  debug: Get a shell into any image or container (Docker Inc.)
    Version:  0.0.37
    Path:     C:\Program Files\Docker\cli-plugins\docker-debug.exe
  desktop: Docker Desktop commands (Beta) (Docker Inc.)
    Version:  v0.1.0
    Path:     C:\Program Files\Docker\cli-plugins\docker-desktop.exe
  dev: Docker Dev Environments (Docker Inc.)
    Version:  v0.1.2
    Path:     C:\Program Files\Docker\cli-plugins\docker-dev.exe
  extension: Manages Docker extensions (Docker Inc.)
    Version:  v0.2.27
    Path:     C:\Program Files\Docker\cli-plugins\docker-extension.exe
  feedback: Provide feedback, right in your terminal! (Docker Inc.)
    Version:  v1.0.5
    Path:     C:\Program Files\Docker\cli-plugins\docker-feedback.exe
  init: Creates Docker-related starter files for your project (Docker Inc.)
    Version:  v1.4.0
    Path:     C:\Program Files\Docker\cli-plugins\docker-init.exe
  sbom: View the packaged-based Software Bill Of Materials (SBOM) for an image (Anchore Inc.)
    Version:  0.6.0
    Path:     C:\Program Files\Docker\cli-plugins\docker-sbom.exe
  scout: Docker Scout (Docker Inc.)
    Version:  v1.15.1
    Path:     C:\Program Files\Docker\cli-plugins\docker-scout.exe

Server:
 Containers: 1
  Running: 1
  Paused: 0
  Stopped: 0
 Images: 1
 Server Version: 27.4.0
 Storage Driver: overlayfs
  driver-type: io.containerd.snapshotter.v1
 Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Cgroup Version: 2
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog
 CDI spec directories:
  /etc/cdi
  /var/run/cdi
 Swarm: inactive
 Runtimes: io.containerd.runc.v2 nvidia runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: 472731909fa34bd7bc9c087e4c27943f9835f111
 runc version: v1.1.13-0-g58aa920
 init version: de40ad0
 Security Options:
  seccomp
   Profile: unconfined
  cgroupns
 Kernel Version: 6.6.87.1-microsoft-standard-WSL2
 Operating System: Docker Desktop
 OSType: linux
 Architecture: x86_64
 CPUs: 8
 Total Memory: 3.709GiB
 Name: docker-desktop
 ID: 1c7fb5d5-79dd-4521-95c2-26c074351547
 Docker Root Dir: /var/lib/docker
 Debug Mode: false
 HTTP Proxy: http.docker.internal:3128
 HTTPS Proxy: http.docker.internal:3128
 No Proxy: hubproxy.docker.internal
 Labels:
  com.docker.desktop.address=npipe://\\.\pipe\docker_cli
 Experimental: false
 Insecure Registries:
  hubproxy.docker.internal:5555
  127.0.0.0/8
 Live Restore Enabled: false

WARNING: daemon is not using the default seccomp profile

C:\Windows\System32>