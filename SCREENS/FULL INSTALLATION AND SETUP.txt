FULL INSTALLATION AND SETUP

111111111111
INSTALL DOCKER DESKTOP
E:\software\Docker Desktop Installer.exe

START DOCKER DESKTOP

222222222222
Open CMD -->Run as Administrator
C:\Users\Naresh>docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts


333333333333
LOGIN TO JENKINS
http://localhost:8080


C:\Windows\System32>docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
df65857f181040fb808f95cd81cd5a30

TO START JENKINS
docker start jenkins

C:\Windows\System32>docker start jenkins

---------------------------------
CHECK IF IT RUNNING: docker ps -a

C:\Users\Naresh>docker ps -a
CONTAINER ID   IMAGE                 COMMAND                  CREATED        STATUS          PORTS                                              NAMES
83014020abf6   jenkins/jenkins:lts   "/usr/bin/tini -- /u…"   17 hours ago   Up 44 seconds   0.0.0.0:8080->8080/tcp, 0.0.0.0:50000->50000/tcp   jenkins

C:\Users\Naresh>
---------------------------------
TO REMOVE JENKINS : docker rm jenkins

JENKINS USENAME AND PASSWORD
Username : fivedata
Password : fivedata123
Email : gvnaressh@gmail.com


Plugin - kubernetes-cd.hpi version 1.0.0
Kubernetes Continous Deploy


DOCKER HUB USERNAME AND PASSWORD
Username : gvnaressh
Password : Uzwall12578*

gvnaressh@gmail.com


https://github.com/narresh369/todos.git

PUSH NEW FILES TO GITHUB:
=========================
git add .
git commit -m "Updated files Edited Dockerfile with ignore file"
git remote add origin https://github.com/narresh369/todos.git
git branch -M main
git push -u origin main


MINIKUBE:
========
https://minikube.sigs.k8s.io/docs/start/?arch=%2Fwindows%2Fx86-64%2Fstable%2F.exe+download

E:\software\minikube-installer.exe

C:\Users\Naresh>minikube version
minikube version: v1.36.0
commit: f8f52f5de11fc6ad8244afac475e1d0f96841df1-dirty

C:\Users\Naresh>


Step-by-Step: Install Minikube on Windows
🔹 1. Download Minikube for Windows
Visit the official page:
👉 https://minikube.sigs.k8s.io/docs/start/

Or download directly:
👉 https://github.com/kubernetes/minikube/releases/latest
Look for minikube-windows-amd64.exe

🔹 2. Rename and Move to PATH
After download:

Rename file to minikube.exe

Move it to a folder already in your PATH (e.g., C:\Windows\System32)
Or add the folder containing minikube.exe to your system’s environment variable PATH.

Open Command Prompt again and test:

minikube version

C:\Users\Naresh>minikube start
* minikube v1.36.0 on Microsoft Windows 11 Home Single Language 10.0.26100.4202 Build 26100.4202

If you use Docker Desktop, Minikube will automatically use Docker as its driver.

Microsoft Windows [Version 10.0.26100.4202]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Naresh>minikube version
minikube version: v1.36.0
commit: f8f52f5de11fc6ad8244afac475e1d0f96841df1-dirty

C:\Users\Naresh>minikube start
* minikube v1.36.0 on Microsoft Windows 11 Home Single Language 10.0.26100.4202 Build 26100.4202
* Automatically selected the docker driver
* Using Docker Desktop driver with root privileges
* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.47 ...
* Downloading Kubernetes v1.33.1 preload ...
    > preloaded-images-k8s-v18-v1...:  347.04 MiB / 347.04 MiB  100.00% 1.37 Mi
    > gcr.io/k8s-minikube/kicbase...:  363.46 MiB / 502.26 MiB  72.36% 1.04 MiB
	
---------------------------------------------------------
Microsoft Windows [Version 10.0.26100.4202]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Naresh>minikube version
minikube version: v1.36.0
commit: f8f52f5de11fc6ad8244afac475e1d0f96841df1-dirty

C:\Users\Naresh>minikube start
* minikube v1.36.0 on Microsoft Windows 11 Home Single Language 10.0.26100.4202 Build 26100.4202
* Automatically selected the docker driver
* Using Docker Desktop driver with root privileges
* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.47 ...
* Downloading Kubernetes v1.33.1 preload ...
    > preloaded-images-k8s-v18-v1...:  347.04 MiB / 347.04 MiB  100.00% 1.37 Mi
    > gcr.io/k8s-minikube/kicbase...:  502.26 MiB / 502.26 MiB  100.00% 1.03 Mi
* Creating docker container (CPUs=2, Memory=2200MB) ...
! Failing to connect to https://registry.k8s.io/ from both inside the minikube container and host machine
* To pull new external images, you may need to configure a proxy: https://minikube.sigs.k8s.io/docs/reference/networking/proxy/
* Preparing Kubernetes v1.33.1 on Docker 28.1.1 ...
  - Generating certificates and keys ...
  - Booting up control plane ...
  - Configuring RBAC rules ...
* Configuring bridge CNI (Container Networking Interface) ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: storage-provisioner, default-storageclass
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

C:\Users\Naresh>	
---------------------------------------------------------	
	
minikube status

C:\Users\Naresh>minikube status
minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured


C:\Users\Naresh>
---------------------------------------------------------

docker stop jenkins
docker rm jenkins


docker run -d \
  --name jenkins \
  -u root \
  -p 8080:8080 -p 50000:50000 \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v jenkins_home:/var/jenkins_home \
  jenkins/jenkins:lts

docker run -d --name jenkins -u root -p 8080:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home  jenkins/jenkins:lts



docker exec -it jenkins bash
apt update && apt install -y docker.io
exit




BACKEND DEPLOYED IN RENDER.COM
https://todos-31gl.onrender.com/
https://todos-31gl.onrender.com/api/todos

[{"id":5,"title":"test","completed":false},{"id":4,"title":"hello render","completed":true},{"id":3,"title":"go to school and pay fee","completed":false},{"id":2,"title":"get milk and corn","completed":true}]


full flow using Jenkins + Docker + K8s
full flow using Jenkins + Docker + K8s
full flow using Jenkins + Docker + K8s


C:\Windows\System32>docker info
Client:
 Version:    27.4.0
 Context:    desktop-linux
 Debug Mode: false
 Plugins:
  ai: Ask Gordon - Docker Agent (Docker Inc.)
    Version:  v0.5.1
    Path:     C:\Program Files\Docker\cli-plugins\docker-ai.exe
  buildx: Docker Buildx (Docker Inc.)
    Version:  v0.19.2-desktop.1
    Path:     C:\Program Files\Docker\cli-plugins\docker-buildx.exe
  compose: Docker Compose (Docker Inc.)
    Version:  v2.31.0-desktop.2
    Path:     C:\Program Files\Docker\cli-plugins\docker-compose.exe
  debug: Get a shell into any image or container (Docker Inc.)
    Version:  0.0.37
    Path:     C:\Program Files\Docker\cli-plugins\docker-debug.exe
  desktop: Docker Desktop commands (Beta) (Docker Inc.)
    Version:  v0.1.0
    Path:     C:\Program Files\Docker\cli-plugins\docker-desktop.exe
  dev: Docker Dev Environments (Docker Inc.)
    Version:  v0.1.2
    Path:     C:\Program Files\Docker\cli-plugins\docker-dev.exe
  extension: Manages Docker extensions (Docker Inc.)
    Version:  v0.2.27
    Path:     C:\Program Files\Docker\cli-plugins\docker-extension.exe
  feedback: Provide feedback, right in your terminal! (Docker Inc.)
    Version:  v1.0.5
    Path:     C:\Program Files\Docker\cli-plugins\docker-feedback.exe
  init: Creates Docker-related starter files for your project (Docker Inc.)
    Version:  v1.4.0
    Path:     C:\Program Files\Docker\cli-plugins\docker-init.exe
  sbom: View the packaged-based Software Bill Of Materials (SBOM) for an image (Anchore Inc.)
    Version:  0.6.0
    Path:     C:\Program Files\Docker\cli-plugins\docker-sbom.exe
  scout: Docker Scout (Docker Inc.)
    Version:  v1.15.1
    Path:     C:\Program Files\Docker\cli-plugins\docker-scout.exe

Server:
 Containers: 1
  Running: 1
  Paused: 0
  Stopped: 0
 Images: 1
 Server Version: 27.4.0
 Storage Driver: overlayfs
  driver-type: io.containerd.snapshotter.v1
 Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Cgroup Version: 2
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog
 CDI spec directories:
  /etc/cdi
  /var/run/cdi
 Swarm: inactive
 Runtimes: io.containerd.runc.v2 nvidia runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: 472731909fa34bd7bc9c087e4c27943f9835f111
 runc version: v1.1.13-0-g58aa920
 init version: de40ad0
 Security Options:
  seccomp
   Profile: unconfined
  cgroupns
 Kernel Version: 6.6.87.1-microsoft-standard-WSL2
 Operating System: Docker Desktop
 OSType: linux
 Architecture: x86_64
 CPUs: 8
 Total Memory: 3.709GiB
 Name: docker-desktop
 ID: 1c7fb5d5-79dd-4521-95c2-26c074351547
 Docker Root Dir: /var/lib/docker
 Debug Mode: false
 HTTP Proxy: http.docker.internal:3128
 HTTPS Proxy: http.docker.internal:3128
 No Proxy: hubproxy.docker.internal
 Labels:
  com.docker.desktop.address=npipe://\\.\pipe\docker_cli
 Experimental: false
 Insecure Registries:
  hubproxy.docker.internal:5555
  127.0.0.0/8
 Live Restore Enabled: false

WARNING: daemon is not using the default seccomp profile

C:\Windows\System32>