8.CI/CD Basics Docker , Kubernates , Jenkins - just basics underneath how the
  deployment works
  E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp

FRONTEND:
========
  
  FOLLOW SETTINGS FROM TAILWIND VITE TAB
https://tailwindcss.com/docs/installation/using-vite
npm install tailwindcss @tailwindcss/vite

npm create vite@latest frontend -- --template react

npm run dev

  VITE v7.0.0  ready in 850 ms

  ➜  Local:   http://localhost:5173/
  ➜  Network: use --host to expose
  ➜  press h + enter to show help



npm install tailwindcss @tailwindcss/vite
npm install axios


BACKEND:
========
npm init -y
in package.json add "type":"module"

npm install express pg cors bcryptjs jsonwebtoken dotenv
npm install express cors dotenv pg
npm install dotenv

npm install --save-dev nodemon

"start": "node index.js",
"dev": "nodemon index.js",



PORT=5000
DATABASE_URL=postgresql://postgresql_user:GsDsXXIECaHl6oOiWNKMIPKIxGCkRpay@dpg-d178cbndiees73dtodng-a.oregon-postgres.render.com/postgresql_crud_db
JWT_SECRET=a04b799600ad8fa1a0d043566e6d85f23d7506a7




E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\backend>npm run dev

> backend@1.0.0 dev
> nodemon index.js

[nodemon] 3.1.10
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,cjs,json
[nodemon] starting `node index.js`
✅ Server running at http://localhost:5000


TODOS TABLE:
===========
 CREATE TABLE IF NOT EXISTS todos (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    completed BOOLEAN DEFAULT false
  )

GITHUB:
=======
http://github.com/

venkatdada369@gmail.com
narresh369

…or create a new repository on the command line

echo "# todos" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/narresh369/todos.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin https://github.com/narresh369/todos.git
git branch -M main
git push -u origin main


********
1.1. Initialize Git (if not already)
git init

1.2. Create .gitignore
Make sure to add common things to ignore:
node_modules/
.env
dist/


1.3. Stage and commit:
git add .
git commit -m "Initial commit: Todo app with React and PostgreSQL backend"

1.4. Create a GitHub repository
Go to https://github.com → create a new repo (e.g., todo-app-deploy)

1.5. Link and push:
git remote add origin https://github.com/yourusername/todo-app-deploy.git
git remote add origin https://github.com/narresh369/todos.git
git branch -M main
git push -u origin main

-------------------------------- RUN THIS FROM ROOT OF APPLICATION--------------------------------------------
git init
git add .
git commit -m "Initial commit: Todo app with React and PostgreSQL backend"
git remote add origin https://github.com/narresh369/todos.git
git branch -M main
git push -u origin main
----------------------------------------------------------------------------
PUSH NEW FILES TO GITHUB:
=========================
git add .
git commit -m "Updated files Edited Dockerfile with ignore file"
git remote add origin https://github.com/narresh369/todos.git
git branch -M main
git push -u origin main



DELETE node_modules package-lock.json
rm -rf node_modules package-lock.json
npm cache clean --force
npm install


tree "E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\backend" /f /a


RENDER:[ TO DEPLOY BACKEND ]
======


https://todos-31gl.onrender.com/api/todos
[{"id":3,"title":"go to school and pay fee","completed":false},{"id":2,"title":"get milk and corn","completed":true}]


https://todos-31gl.onrender.com/api/todos



VERCEL:[ TO DEPLOY FRONTEND ]
======
https://vercel.com/narresh369s-projects

npm install vite@^6


git init
git remote add origin https://github.com/narresh369/todos.git
git add .
git commit -m "Initial commit"
git push -u origin main


npm install -D autoprefixer
npm install -D @tailwindcss/postcss



WITHOUT TAILWIND:
=================
npm create vite@latest frontend -- --template react


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>npm create vite@latest frontend -- --template react

> npx
> create-vite frontend --template react

|
o  Scaffolding project in E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend...
|
—  Done. Now run:

  cd frontend
  npm install
  npm run dev


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>

npm install axios


https://todos-zeta-beryl.vercel.app/



DOCKER DESKTOP:
===============
E:\software\Docker Desktop Installer

gvnaressh@gmail.com
Gvnaressh3695

✅ Tools Required to Test Locally
1️⃣ Docker Desktop ✅ (You already have this)

2️⃣ Jenkins (Dockerized)
Run Jenkins inside Docker:


docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts

------------------
C:\Users\Naresh>docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts
Unable to find image 'jenkins/jenkins:lts' locally
lts: Pulling from jenkins/jenkins
2315362e4443: Download complete
f1c4b8ee4b6f: Download complete
51c9d25ed578: Download complete
719a01689f92: Download complete
e05a8359c72d: Download complete
4185f63a4bf1: Download complete
62d5bb186774: Download complete
10709260192c: Download complete
1c8d8eef6986: Download complete
474c0ab7c65d: Download complete
0c01110621e0: Download complete
981fa0afce25: Download complete
Digest: sha256:f4607803bd1ee4dc91b1695b07d3a04c77b4f575a507ff65375af888e1497662
Status: Downloaded newer image for jenkins/jenkins:lts
d46cc4a205b2be801915216319af74ee19b7bc7249afce4abc432da1435b6d21

C:\Users\Naresh>
------------------

🟡 Access Jenkins at:
http://localhost:8080
It will ask for an initial admin password:

C:\Users\Naresh>docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
2929d01cdb0f4c5da2650caa0f43404e

JENKINS
fivedata
fivedata123
gvnaressh@gmail.com

DOCKER INSTALLATION
https://youtu.be/Tg2krHXHzBc?list=PLVz2XdJiJQxzMiFDnwxUDxmuZQU3igcBb
https://youtu.be/Tg2krHXHzBc?list=PLVz2XdJiJQxzMiFDnwxUDxmuZQU3igcBb
https://youtu.be/Tg2krHXHzBc?list=PLVz2XdJiJQxzMiFDnwxUDxmuZQU3igcBb

https://youtu.be/vBoOXP6BkDI
https://youtu.be/vBoOXP6BkDI
https://youtu.be/vBoOXP6BkDI

https://medium.com/@javatechie/kubernetes-tutorial-run-deploy-spring-boot-application-in-k8s-cluster-using-yaml-configuration-3b079154d232
https://medium.com/@javatechie/kubernetes-tutorial-run-deploy-spring-boot-application-in-k8s-cluster-using-yaml-configuration-3b079154d232
https://medium.com/@javatechie/kubernetes-tutorial-run-deploy-spring-boot-application-in-k8s-cluster-using-yaml-configuration-3b079154d232

https://youtu.be/qof9A8k64rA?list=PLVz2XdJiJQxybsyOxK7WFtteH42ayn5i9
https://youtu.be/qof9A8k64rA?list=PLVz2XdJiJQxybsyOxK7WFtteH42ayn5i9
https://youtu.be/qof9A8k64rA?list=PLVz2XdJiJQxybsyOxK7WFtteH42ayn5i9

https://www.youtube.com/c/JavaTechie/playlists

https://youtu.be/Tg2krHXHzBc?list=PLVz2XdJiJQxzMiFDnwxUDxmuZQU3igcBb
https://youtu.be/Tg2krHXHzBc?list=PLVz2XdJiJQxzMiFDnwxUDxmuZQU3igcBb
https://youtu.be/Tg2krHXHzBc?list=PLVz2XdJiJQxzMiFDnwxUDxmuZQU3igcBb

https://github.com/Java-Techie-jt/devops-automation
https://github.com/Java-Techie-jt/devops-automation
https://github.com/Java-Techie-jt/devops-automation



KUBERNETES:
----------
kubectl (Kubernetes CLI)
choco install kubernetes-cli   # on Windows (with Chocolatey)
kubectl version --client

OPEN CMD RUN AS ADMINISTRATOR

*****************************
choco install kubernetes-cli 
*****************************
---------
Microsoft Windows [Version 10.0.26100.4202]
(c) Microsoft Corporation. All rights reserved.

C:\Windows\System32>kubectl version --client
Client Version: v1.30.5
Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3

C:\Windows\System32>choco install kubernetes-cli
Chocolatey v1.2.1
Installing the following packages:
kubernetes-cli
By installing, you accept licenses for the packages.

kubernetes-cli v1.33.2 [Approved]
kubernetes-cli package files install completed. Performing other installation steps.
The package kubernetes-cli wants to run 'chocolateyInstall.ps1'.
Note: If you don't run this script, the installation will fail.
Note: To confirm automatically next time, use '-y' or consider:
choco feature enable -n allowGlobalConfirmation
Do you want to run the script?([Y]es/[A]ll - yes to all/[N]o/[P]rint): Yes

Extracting 64-bit C:\ProgramData\chocolatey\lib\kubernetes-cli\tools\kubernetes-client-windows-amd64.tar.gz to C:\ProgramData\chocolatey\lib\kubernetes-cli\tools...
C:\ProgramData\chocolatey\lib\kubernetes-cli\tools
Extracting 64-bit C:\ProgramData\chocolatey\lib\kubernetes-cli\tools\kubernetes-client-windows-amd64.tar to C:\ProgramData\chocolatey\lib\kubernetes-cli\tools...
C:\ProgramData\chocolatey\lib\kubernetes-cli\tools
Environment Vars (like PATH) have changed. Close/reopen your shell to
 see the changes (or in powershell/cmd.exe just type `refreshenv`).
 ShimGen has successfully created a shim for kubectl-convert.exe
 ShimGen has successfully created a shim for kubectl.exe
 The install of kubernetes-cli was successful.
  Software installed to 'C:\ProgramData\chocolatey\lib\kubernetes-cli\tools'

Chocolatey installed 1/1 packages.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).

C:\Windows\System32>
--------- 

************************
kubectl version --client
************************
C:\Windows\System32>kubectl version --client
Client Version: v1.33.2
Kustomize Version: v5.6.0

C:\Windows\System32>




Minikube (Local Kubernetes Cluster) 
 
 https://minikube.sigs.k8s.io/docs/start/
 
 https://minikube.sigs.k8s.io/docs/start/?arch=%2Fwindows%2Fx86-64%2Fstable%2F.exe+download
 


https://youtu.be/vBoOXP6BkDI



111111111111
INSTALL DOCKER DESKTOP
E:\software\Docker Desktop Installer.exe

START DOCKER DESKTOP

222222222222
Open CMD -->Run as Administrator
C:\Users\Naresh>docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts








---

### ✅ Here's what you can consider doing next:

---

### 1. 🔒 **Secure the Application**

* **Rate limiting / API protection:** Use a rate limiter middleware (like `express-rate-limit`) on your backend.
* **CORS config:** Only allow your frontend domain in CORS settings.
* **Sanitize inputs:** Use libraries like `express-validator` to prevent injection attacks.
* **HTTPS:** Both Render and Vercel use HTTPS by default — you're good here.

---

### 2. ⚙️ **Add CI/CD Automation (Optional)**

* Use GitHub Actions to trigger build/deploy automatically when you push to `main` branch.
* Vercel and Render both support GitHub hooks (Render under "Deploy from Git").

---

### 3. 📝 **Add Features (Suggestions)**

* ✅ Mark task as complete (you already have this)
* ✏️ Edit tasks
* 📆 Due dates and priorities
* 🔍 Search and filter
* 👥 User authentication (JWT, bcryptjs)

---

### 4. 🔗 **Connect a Custom Domain (Optional)**

* **On Vercel:** Go to project settings → Domains → Add your custom domain
* **On Render:** Same for backend API if needed

---

### 5. 📊 **Monitor Performance & Errors**

* Use [LogRocket](https://logrocket.com/), [Sentry](https://sentry.io/), or browser dev tools for frontend
* Use Render’s logs tab for backend issues

---

### 6. 📤 **Document Your Project**

Prepare a solid `README.md`:

```md
# 📝 Full Stack Todo App

## 🖥️ Frontend
- Vite + React
- Hosted on [Vercel](https://your-frontend.vercel.app)

## 🛠️ Backend
- Express + PostgreSQL
- Hosted on [Render](https://your-backend.onrender.com)

## 🔐 Features
- Add, delete, toggle tasks
- REST API integration
- Responsive design

## 📦 Tech Stack
- React, Vite, Axios
- Node.js, Express, PostgreSQL
- Deployed using Vercel & Render
```

---

Would you like help with adding any **new feature**, setting up **CI/CD**, or creating a **GitHub README**?






********

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git init
Initialized empty Git repository in E:/MURALI/REACT-JS-TRAINING/ADDITIONAL-BACK-END/CICD-Basics-Docker-Kubernates-Jenkins/todoApp/.git/

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git add .
warning: in the working copy of 'backend/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'backend/package.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/.gitignore', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/README.md', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/eslint.config.js', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/index.html', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/package.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/src/App copy.jsx', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/src/App.css', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/src/App.jsx', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/src/index copy.css', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/src/main.jsx', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'frontend/vite.config.js', LF will be replaced by CRLF the next time Git touches it

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git commit -m "Initial commit: Todo app with React and PostgreSQL backend"
[master (root-commit) 758ddd0] Initial commit: Todo app with React and PostgreSQL backend
 20 files changed, 5760 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 SCREENS/STEPS.txt
 create mode 100644 backend/index.js
 create mode 100644 backend/package-lock.json
 create mode 100644 backend/package.json
 create mode 100644 frontend/.gitignore
 create mode 100644 frontend/README.md
 create mode 100644 frontend/eslint.config.js
 create mode 100644 frontend/index.html
 create mode 100644 frontend/package-lock.json
 create mode 100644 frontend/package.json
 create mode 100644 frontend/public/vite.svg
 create mode 100644 frontend/src/App copy.jsx
 create mode 100644 frontend/src/App.css
 create mode 100644 frontend/src/App.jsx
 create mode 100644 frontend/src/assets/react.svg
 create mode 100644 frontend/src/index copy.css
 create mode 100644 frontend/src/index.css
 create mode 100644 frontend/src/main.jsx
 create mode 100644 frontend/vite.config.js

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git remote add origin https://github.com/narresh369/todos.git

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git branch -M main

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git push -u origin main
Enumerating objects: 28, done.
Counting objects: 100% (28/28), done.
Delta compression using up to 8 threads
Compressing objects: 100% (23/23), done.
Writing objects: 100% (28/28), 50.67 KiB | 4.22 MiB/s, done.
Total 28 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/narresh369/todos.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>

===============================================================================================================
Microsoft Windows [Version 10.0.26100.4202]
(c) Microsoft Corporation. All rights reserved.

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>npm create vite@latest frontend -- --template react
Need to install the following packages:
create-vite@7.0.0
Ok to proceed? (y) y

npm warn EBADENGINE Unsupported engine {
npm warn EBADENGINE   package: 'create-vite@7.0.0',
npm warn EBADENGINE   required: { node: '^20.19.0 || >=22.12.0' },
npm warn EBADENGINE   current: { node: 'v20.13.1', npm: '10.9.0' }
npm warn EBADENGINE }

> npx
> create-vite frontend --template react

|
o  Scaffolding project in E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend...
|
—  Done. Now run:

  cd frontend
  npm install
  npm run dev


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp> cd frontend

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>  npm install
npm warn EBADENGINE Unsupported engine {
npm warn EBADENGINE   package: 'vite@7.0.0',
npm warn EBADENGINE   required: { node: '^20.19.0 || >=22.12.0' },
npm warn EBADENGINE   current: { node: 'v20.13.1', npm: '10.9.0' }
npm warn EBADENGINE }

added 154 packages, and audited 155 packages in 17s

33 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\frontend>npm run dev

===================================================================================


postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgresql_user
      POSTGRES_PASSWORD: GsDsXXIECaHl6oOiWNKMIPKIxGCkRpay
      POSTGRES_DB: postgresql_crud_db
	  
	  
	  
	  todo-app-deploy/
├── client/
│   ├── Dockerfile
│   └── ...
├── server/
│   ├── Dockerfile
│   └── ...
├── docker-compose.yml
├── Jenkinsfile
└── README.md

	  
Create a Docker Hub Account 	  
	  
google gmail signup
gvnaressh@gmail.com	  
username : gvnaressh	  

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\k8s\backend-deployment.yaml
image: your-dockerhub-username/todo-backend:latest
image: gvnaressh/todo-backend:latest

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\k8s\frontend-deployment.yaml
image: your-dockerhub-username/todo-frontend:latest
image: gvnaressh/todo-frontend:latest

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp\k8s\postgres-deployment.yaml	  
 env:
	- name: POSTGRES_DB
	  value: "tododb"
	- name: POSTGRES_USER
	  value: "postgres"
	- name: POSTGRES_PASSWORD
	  value: "yourpassword"	  


 env:
	- name: POSTGRES_DB
	  value: "postgresql_crud_db"
	- name: POSTGRES_USER
	  value: "postgresql_user"
	- name: POSTGRES_PASSWORD
	  value: "GsDsXXIECaHl6oOiWNKMIPKIxGCkRpay"	


	  
	  

POSTGRESQL - REMOTE
narresh.gudimetlaa@gmail.com
Gvnaressh3695
https://dashboard.render.com/
NAME:crud-postgresql
DATABASE:postgresql_crud_db
USER:crud-postgresql_user
INTERNAL DATABASE URL
postgresql://postgresql_user:GsDsXXIECaHl6oOiWNKMIPKIxGCkRpay@dpg-d178cbndiees73dtodng-a/postgresql_crud_db
EXTERNAL DATABASE URL[USE THIS]
postgresql://postgresql_user:GsDsXXIECaHl6oOiWNKMIPKIxGCkRpay@dpg-d178cbndiees73dtodng-a.oregon-postgres.render.com/postgresql_crud_db


	  
	  
	  
	  
E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>docker
'docker' is not recognized as an internal or external command,
operable program or batch file.

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git add .

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git commit -m "IAdd updated files for full-stack todo app with Docker setup"
[main 8c13841] IAdd updated files for full-stack todo app with Docker setup
 9 files changed, 298 insertions(+), 12 deletions(-)
 create mode 100644 backend/Dockerfile
 create mode 100644 frontend/Dockerfile
 create mode 100644 frontend/Jenkinsfile
 create mode 100644 frontend/docker-compose.yml
 create mode 100644 k8s/backend-deployment.yaml
 create mode 100644 k8s/frontend-deployment.yaml
 create mode 100644 k8s/postgres-deployment.yaml
 create mode 100644 k8s/postgres-pvc.yaml

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git remote add origin https://github.com/narresh369/todos.git
error: remote origin already exists.

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git branch -M main

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>git push -u origin main
Enumerating objects: 20, done.
Counting objects: 100% (20/20), done.
Delta compression using up to 8 threads
Compressing objects: 100% (14/14), done.
Writing objects: 100% (15/15), 3.39 KiB | 173.00 KiB/s, done.
Total 15 (delta 5), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (5/5), completed with 3 local objects.
To https://github.com/narresh369/todos.git
   758ddd0..8c13841  main -> main
branch 'main' set up to track 'origin/main'.

E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>



E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>tree "E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp" /f /a | findstr /v /i "node_modules .git dist public SCREENS .bin .vite .vite-temp .@ampproject @babel core vite tar tapable tailwindcss"
Folder PATH listing for volume DATA
Volume serial number is 0ED0-D3D0
E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-BASICS-DOCKER-KUBERNATES-JENKINS\TODOAPP
|   docker-compose.yml
|
+---backend
|       .dockerignore
|       .env
|       Dockerfile
|       index.js
|       package.json
|
+---frontend
|   |   Dockerfile
|   |   eslint.config.js
|   |   index.html
|   |   Jenkinsfile
|   |   package-lock.json
|   |   package.json
|   |   README.md
|   |
|   |   |   .package-lock.json
|   |   |
|   |
|   |
|   \---src
|       |   App copy.jsx
|       |   App.css
|       |   App.jsx
|       |   index copy.css
|       |   index.css
|       |   main.jsx
|       |
|       \---assets
|               react.svg
|
+---k8s
|       backend-deployment.yaml
|       frontend-deployment.yaml
|       postgres-deployment.yaml
|       postgres-pvc.yaml
|
        STEPS.txt


E:\MURALI\REACT-JS-TRAINING\ADDITIONAL-BACK-END\CICD-Basics-Docker-Kubernates-Jenkins\todoApp>